rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to check if user owns the note
    function isNoteOwner(noteData) {
      return isAuthenticated() && request.auth.uid == noteData.userId;
    }
    
    // Helper function to validate note data
    function isValidNote(data) {
      return data.keys().hasAll(['title', 'content', 'category', 'userId', 'createdAt', 'updatedAt']) &&
             data.title is string && data.title.size() > 0 && data.title.size() <= 200 &&
             data.content is string && data.content.size() <= 10000 &&
             data.category is string && data.category.size() > 0 && data.category.size() <= 50 &&
             data.userId is string && data.userId.size() > 0 &&
             data.createdAt is timestamp &&
             data.updatedAt is timestamp;
    }
    
    // Helper function to validate user data
    function isValidUser(data) {
      return data.keys().hasAll(['name', 'email', 'createdAt']) &&
             data.name is string && data.name.size() > 0 && data.name.size() <= 100 &&
             data.email is string && data.email.size() > 0 && data.email.size() <= 100 &&
             data.createdAt is timestamp;
    }

    // Users collection - users can only access their own profile
    match /users/{userId} {
      allow read, write: if isOwner(userId);
      allow create: if isAuthenticated() && 
                       request.auth.uid == userId && 
                       isValidUser(resource.data);
      allow update: if isOwner(userId) && 
                       isValidUser(resource.data);
    }

    // Notes collection - users can only access their own notes
    match /notes/{noteId} {
      allow read, write: if isAuthenticated() && 
                           request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && 
                       request.auth.uid == request.resource.data.userId && 
                       isValidNote(request.resource.data);
      allow update: if isNoteOwner(resource.data) && 
                       isValidNote(request.resource.data) &&
                       request.auth.uid == request.resource.data.userId;
      allow delete: if isNoteOwner(resource.data);
    }

    // Categories collection - users can only access their own categories
    match /categories/{categoryId} {
      allow read, write: if isAuthenticated() && 
                           request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && 
                       request.auth.uid == request.resource.data.userId;
      allow update: if isAuthenticated() && 
                       request.auth.uid == resource.data.userId &&
                       request.auth.uid == request.resource.data.userId;
      allow delete: if isAuthenticated() && 
                       request.auth.uid == resource.data.userId;
    }

    // Tags collection - users can only access their own tags
    match /tags/{tagId} {
      allow read, write: if isAuthenticated() && 
                           request.auth.uid == resource.data.userId;
      allow create: if isAuthenticated() && 
                       request.auth.uid == request.resource.data.userId;
      allow update: if isAuthenticated() && 
                       request.auth.uid == resource.data.userId &&
                       request.auth.uid == request.resource.data.userId;
      allow delete: if isAuthenticated() && 
                       request.auth.uid == resource.data.userId;
    }

    // Analytics collection - read-only for authenticated users
    match /analytics/{docId} {
      allow read: if isAuthenticated();
      allow write: if false; // No direct writes to analytics
    }

    // Error logs collection - read-only for authenticated users
    match /errorLogs/{docId} {
      allow read: if isAuthenticated();
      allow write: if false; // No direct writes to error logs
    }

    // Performance metrics collection - read-only for authenticated users
    match /performanceMetrics/{docId} {
      allow read: if isAuthenticated();
      allow write: if false; // No direct writes to performance metrics
    }

    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 